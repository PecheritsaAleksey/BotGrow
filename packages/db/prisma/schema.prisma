datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String   @id @default(uuid())
  telegramId  Int      @unique
  username    String?
  firstName   String
  lastName    String?
  photoUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bots        Bot[]    @relation("UserBots")
}

model Bot {
  id             String   @id @default(uuid())
  userId         String
  name           String
  description    String?  @db.Text
  photoUrl       String?
  encryptedToken String
  tokenHash      String
  tokenLast4     String   @default("")
  status         String   @default("disconnected")
  webhookUrl     String?
  lastError      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(name: "UserBots", fields: [userId], references: [id], onDelete: Cascade)

  // Subscribers relation (implicit backreference)
  // Not required for functionality but useful for querying
  subscribers Subscriber[]

  @@index([userId])
  @@index([tokenHash])
}

model Subscriber {
  id         String   @id @default(uuid())
  botId      String
  telegramId Int
  username   String?
  firstName  String?
  lastName   String?
  language   String?
  photoUrl   String?
  isActive   Boolean  @default(true)
  lastSeenAt DateTime @default(now())
  createdAt  DateTime @default(now())

  bot Bot @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@unique([botId, telegramId])
  @@index([botId])
  @@index([botId, lastSeenAt])
}
